/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace DoubleEndedQueue {
  export type CasinoDataStruct = {
    bidder: PromiseOrValue<string>;
    bid: PromiseOrValue<BigNumberish>;
    timeAdded: PromiseOrValue<BigNumberish>;
  };

  export type CasinoDataStructOutput = [string, BigNumber, BigNumber] & {
    bidder: string;
    bid: BigNumber;
    timeAdded: BigNumber;
  };
}

export interface CasinoInterface extends utils.Interface {
  functions: {
    "biddingAmount()": FunctionFragment;
    "changeBiddingAmount(uint256)": FunctionFragment;
    "changeNumbersRange(uint256)": FunctionFragment;
    "changeOwnerIncomePercentage(uint256)": FunctionFragment;
    "changePotIncomePercentage(uint256)": FunctionFragment;
    "changePotPrizePercentage(uint256)": FunctionFragment;
    "changeQueuePrizeAmount(uint256)": FunctionFragment;
    "changeStaticPrize(uint256)": FunctionFragment;
    "changeTimeToLive(uint256)": FunctionFragment;
    "changeToBePaid(address,uint256)": FunctionFragment;
    "cleanQueue()": FunctionFragment;
    "getMax(uint256,uint256)": FunctionFragment;
    "guessTheNumber(uint256)": FunctionFragment;
    "numbersRange()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerIncomePercentage()": FunctionFragment;
    "pot()": FunctionFragment;
    "potIncomePercentage()": FunctionFragment;
    "potPrizePercentage()": FunctionFragment;
    "queue()": FunctionFragment;
    "queueAvailableFunds()": FunctionFragment;
    "queueBack()": FunctionFragment;
    "queueFront()": FunctionFragment;
    "queueLength()": FunctionFragment;
    "queuePrizeAmount()": FunctionFragment;
    "queueTakenAmount()": FunctionFragment;
    "staticPrize()": FunctionFragment;
    "timeToLive()": FunctionFragment;
    "toBePaid(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
    "withdrawOwner(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "biddingAmount"
      | "changeBiddingAmount"
      | "changeNumbersRange"
      | "changeOwnerIncomePercentage"
      | "changePotIncomePercentage"
      | "changePotPrizePercentage"
      | "changeQueuePrizeAmount"
      | "changeStaticPrize"
      | "changeTimeToLive"
      | "changeToBePaid"
      | "cleanQueue"
      | "getMax"
      | "guessTheNumber"
      | "numbersRange"
      | "owner"
      | "ownerIncomePercentage"
      | "pot"
      | "potIncomePercentage"
      | "potPrizePercentage"
      | "queue"
      | "queueAvailableFunds"
      | "queueBack"
      | "queueFront"
      | "queueLength"
      | "queuePrizeAmount"
      | "queueTakenAmount"
      | "staticPrize"
      | "timeToLive"
      | "toBePaid"
      | "withdraw"
      | "withdrawOwner"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "biddingAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeBiddingAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeNumbersRange",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeOwnerIncomePercentage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changePotIncomePercentage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changePotPrizePercentage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeQueuePrizeAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeStaticPrize",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeTimeToLive",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeToBePaid",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cleanQueue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMax",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "guessTheNumber",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "numbersRange",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerIncomePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "potIncomePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "potPrizePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "queue", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "queueAvailableFunds",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "queueBack", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "queueFront",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queueLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queuePrizeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queueTakenAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "staticPrize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeToLive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toBePaid",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawOwner",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "biddingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeBiddingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeNumbersRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOwnerIncomePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changePotIncomePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changePotPrizePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeQueuePrizeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeStaticPrize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeTimeToLive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeToBePaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cleanQueue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "guessTheNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numbersRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerIncomePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "potIncomePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "potPrizePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "queue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queueAvailableFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "queueBack", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "queueFront", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queueLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queuePrizeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queueTakenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "staticPrize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timeToLive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toBePaid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawOwner",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Casino extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CasinoInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    biddingAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    changeBiddingAmount(
      _biddingAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeNumbersRange(
      _numbersRange: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeOwnerIncomePercentage(
      _ownerIncomePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changePotIncomePercentage(
      _potIncomePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changePotPrizePercentage(
      _percentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeQueuePrizeAmount(
      _queuePrizeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeStaticPrize(
      _staticPrize: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeTimeToLive(
      _timeToLive: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeToBePaid(
      _address: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cleanQueue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getMax(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    guessTheNumber(
      _number: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    numbersRange(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerIncomePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    pot(overrides?: CallOverrides): Promise<[BigNumber]>;

    potIncomePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    potPrizePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    queue(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { _begin: BigNumber; _end: BigNumber }>;

    queueAvailableFunds(overrides?: CallOverrides): Promise<[BigNumber]>;

    queueBack(
      overrides?: CallOverrides
    ): Promise<[DoubleEndedQueue.CasinoDataStructOutput]>;

    queueFront(
      overrides?: CallOverrides
    ): Promise<[DoubleEndedQueue.CasinoDataStructOutput]>;

    queueLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    queuePrizeAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    queueTakenAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    staticPrize(overrides?: CallOverrides): Promise<[BigNumber]>;

    timeToLive(overrides?: CallOverrides): Promise<[BigNumber]>;

    toBePaid(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawOwner(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  biddingAmount(overrides?: CallOverrides): Promise<BigNumber>;

  changeBiddingAmount(
    _biddingAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeNumbersRange(
    _numbersRange: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeOwnerIncomePercentage(
    _ownerIncomePercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changePotIncomePercentage(
    _potIncomePercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changePotPrizePercentage(
    _percentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeQueuePrizeAmount(
    _queuePrizeAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeStaticPrize(
    _staticPrize: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeTimeToLive(
    _timeToLive: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeToBePaid(
    _address: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cleanQueue(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getMax(
    a: PromiseOrValue<BigNumberish>,
    b: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  guessTheNumber(
    _number: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  numbersRange(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerIncomePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  pot(overrides?: CallOverrides): Promise<BigNumber>;

  potIncomePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  potPrizePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  queue(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { _begin: BigNumber; _end: BigNumber }>;

  queueAvailableFunds(overrides?: CallOverrides): Promise<BigNumber>;

  queueBack(
    overrides?: CallOverrides
  ): Promise<DoubleEndedQueue.CasinoDataStructOutput>;

  queueFront(
    overrides?: CallOverrides
  ): Promise<DoubleEndedQueue.CasinoDataStructOutput>;

  queueLength(overrides?: CallOverrides): Promise<BigNumber>;

  queuePrizeAmount(overrides?: CallOverrides): Promise<BigNumber>;

  queueTakenAmount(overrides?: CallOverrides): Promise<BigNumber>;

  staticPrize(overrides?: CallOverrides): Promise<BigNumber>;

  timeToLive(overrides?: CallOverrides): Promise<BigNumber>;

  toBePaid(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawOwner(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    biddingAmount(overrides?: CallOverrides): Promise<BigNumber>;

    changeBiddingAmount(
      _biddingAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeNumbersRange(
      _numbersRange: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeOwnerIncomePercentage(
      _ownerIncomePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changePotIncomePercentage(
      _potIncomePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changePotPrizePercentage(
      _percentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeQueuePrizeAmount(
      _queuePrizeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeStaticPrize(
      _staticPrize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeTimeToLive(
      _timeToLive: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeToBePaid(
      _address: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cleanQueue(overrides?: CallOverrides): Promise<void>;

    getMax(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    guessTheNumber(
      _number: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    numbersRange(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerIncomePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    pot(overrides?: CallOverrides): Promise<BigNumber>;

    potIncomePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    potPrizePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    queue(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { _begin: BigNumber; _end: BigNumber }>;

    queueAvailableFunds(overrides?: CallOverrides): Promise<BigNumber>;

    queueBack(
      overrides?: CallOverrides
    ): Promise<DoubleEndedQueue.CasinoDataStructOutput>;

    queueFront(
      overrides?: CallOverrides
    ): Promise<DoubleEndedQueue.CasinoDataStructOutput>;

    queueLength(overrides?: CallOverrides): Promise<BigNumber>;

    queuePrizeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    queueTakenAmount(overrides?: CallOverrides): Promise<BigNumber>;

    staticPrize(overrides?: CallOverrides): Promise<BigNumber>;

    timeToLive(overrides?: CallOverrides): Promise<BigNumber>;

    toBePaid(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    withdrawOwner(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    biddingAmount(overrides?: CallOverrides): Promise<BigNumber>;

    changeBiddingAmount(
      _biddingAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeNumbersRange(
      _numbersRange: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeOwnerIncomePercentage(
      _ownerIncomePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changePotIncomePercentage(
      _potIncomePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changePotPrizePercentage(
      _percentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeQueuePrizeAmount(
      _queuePrizeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeStaticPrize(
      _staticPrize: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeTimeToLive(
      _timeToLive: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeToBePaid(
      _address: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cleanQueue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getMax(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    guessTheNumber(
      _number: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    numbersRange(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerIncomePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    pot(overrides?: CallOverrides): Promise<BigNumber>;

    potIncomePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    potPrizePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    queue(overrides?: CallOverrides): Promise<BigNumber>;

    queueAvailableFunds(overrides?: CallOverrides): Promise<BigNumber>;

    queueBack(overrides?: CallOverrides): Promise<BigNumber>;

    queueFront(overrides?: CallOverrides): Promise<BigNumber>;

    queueLength(overrides?: CallOverrides): Promise<BigNumber>;

    queuePrizeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    queueTakenAmount(overrides?: CallOverrides): Promise<BigNumber>;

    staticPrize(overrides?: CallOverrides): Promise<BigNumber>;

    timeToLive(overrides?: CallOverrides): Promise<BigNumber>;

    toBePaid(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawOwner(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    biddingAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeBiddingAmount(
      _biddingAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeNumbersRange(
      _numbersRange: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeOwnerIncomePercentage(
      _ownerIncomePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changePotIncomePercentage(
      _potIncomePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changePotPrizePercentage(
      _percentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeQueuePrizeAmount(
      _queuePrizeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeStaticPrize(
      _staticPrize: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeTimeToLive(
      _timeToLive: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeToBePaid(
      _address: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cleanQueue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getMax(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    guessTheNumber(
      _number: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    numbersRange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerIncomePercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    potIncomePercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    potPrizePercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queueAvailableFunds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queueBack(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queueFront(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queueLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queuePrizeAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queueTakenAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    staticPrize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeToLive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toBePaid(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawOwner(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
